[{"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\index.js":"1","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\App.js":"2","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Nav.js":"3","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Main.js":"4","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Header.js":"5","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\context\\AuthProvider.js":"6","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\context\\HttpHeadersProvider.js":"7","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\Router.js":"8","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Home.js":"9","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsList.js":"10","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsUpdate.js":"11","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsWrite.js":"12","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsDetail.js":"13","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\member\\Join.js":"14","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\member\\Login.js":"15","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\member\\Logout.js":"16","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\CitySelect.js":"17","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\CategorySelect.js":"18","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\comment\\CommentWrite.js":"19","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\comment\\CommentList.js":"20","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\comment\\Comment.js":"21"},{"size":205,"mtime":1664027998000,"results":"22","hashOfConfig":"23"},{"size":1153,"mtime":1664027998000,"results":"24","hashOfConfig":"23"},{"size":2714,"mtime":1664027998000,"results":"25","hashOfConfig":"23"},{"size":291,"mtime":1664027998000,"results":"26","hashOfConfig":"23"},{"size":335,"mtime":1664027998000,"results":"27","hashOfConfig":"23"},{"size":359,"mtime":1664027998000,"results":"28","hashOfConfig":"23"},{"size":556,"mtime":1664027998000,"results":"29","hashOfConfig":"23"},{"size":936,"mtime":1664027998000,"results":"30","hashOfConfig":"23"},{"size":163,"mtime":1664027998000,"results":"31","hashOfConfig":"23"},{"size":6649,"mtime":1664027998000,"results":"32","hashOfConfig":"23"},{"size":2222,"mtime":1664027998000,"results":"33","hashOfConfig":"23"},{"size":4299,"mtime":1664027998000,"results":"34","hashOfConfig":"23"},{"size":4047,"mtime":1664027998000,"results":"35","hashOfConfig":"23"},{"size":6143,"mtime":1664027998000,"results":"36","hashOfConfig":"23"},{"size":2079,"mtime":1664027998000,"results":"37","hashOfConfig":"23"},{"size":543,"mtime":1664027998000,"results":"38","hashOfConfig":"23"},{"size":5078,"mtime":1664027998000,"results":"39","hashOfConfig":"23"},{"size":986,"mtime":1664027998000,"results":"40","hashOfConfig":"23"},{"size":1916,"mtime":1664027998000,"results":"41","hashOfConfig":"23"},{"size":1510,"mtime":1664027998000,"results":"42","hashOfConfig":"23"},{"size":3912,"mtime":1664027998000,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16lbzng",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\index.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\App.js",["120","121"],[],"import React, { useState, createContext } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport AuthProvider from \"./components/context/AuthProvider\";\nimport HttpHeadersProvider from \"./components/context/HttpHeadersProvider\";\n\nimport Header from \"./components/app/Header\";\nimport Main from \"./components/app/Main\";\nimport Nav from \"./components/app/Nav\";\n\nexport const Appcontext = createContext();\n\nexport default function App() {\n  const [articleList, setArticleList] = useState([]);\n  const [user, setUser] = useState(null);\n  const [cities, setCities] = useState({\n    main_city: \"\",\n    sub_city: \"\",\n  });\n  const [category, setCategories] = useState(\"\");\n  const value = { articleList, setArticleList, cities, setCities, category, setCategories };\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Header />\n\n        <Appcontext.Provider value={value}>\n          <AuthProvider>\n            <HttpHeadersProvider>\n            <Nav />\n            <Main />\n            </HttpHeadersProvider>\n\n          </AuthProvider>\n        </Appcontext.Provider>\n\n      </BrowserRouter>\n    </div>\n  );\n}\n","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Nav.js",["122","123"],[],"import { useContext, useState } from \"react\";\nimport { AuthContext } from \"../context/AuthProvider\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  const { auth, setAuth } = useContext(AuthContext);\n\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark sticky-top\">\n      <div className=\"container\">\n        <div\n          className=\"navbar-collapse collapse justify-content-between\"\n          id=\"navbar-content\"\n        >\n          <ul className=\"navbar-nav mr-auto\">\n            {/* 메인 화면 */}\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/\">\n                <i className=\"fas fa-home\"></i> Home\n              </Link>\n            </li>\n\n            {/* 게시판 */}\n            <li className=\"nav-item dropdown\">\n              <div\n                className=\"nav-link dropdown-toggle\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                게시판\n              </div>\n\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <Link className=\"dropdown-item\" to=\"/bbslist\">\n                  글목록\n                </Link>\n                <Link className=\"dropdown-item\" to=\"/bbswrite\">\n                  글추가\n                </Link>\n              </div>\n            </li>\n          </ul>\n          <ul className=\"navbar-nav ml-auto\">\n            {auth ? (\n              <>\n                {/* 회원 정보 */}\n                <li className=\"nav-item\">\n                  <span className=\"nav-link\">\n                    {\" \"}\n                    {auth} 님 반갑습니다 <i className=\"fab fa-ello\"></i> &nbsp;{\" \"}\n                  </span>\n                </li>\n\n                {/* 로그아웃 */}\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to=\"/logout\">\n                    <i className=\"fas fa-sign-out-alt\"></i> 로그아웃\n                  </Link>\n                </li>\n              </>\n            ) : (\n              <>\n                {/* 로그인 */}\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to=\"/login\">\n                    로그인\n                  </Link>\n                </li>\n\n                {/* 회원가입 */}\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to=\"/join\">\n                    회원가입\n                  </Link>\n                </li>\n              </>\n            )}\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Main.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Header.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\context\\AuthProvider.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\context\\HttpHeadersProvider.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\Router.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\app\\Home.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsList.js",["124"],[],"import React, { useContext, useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Appcontext } from \"../../App\";\nimport Pagination from \"react-js-pagination\";\nimport CitySelect from \"../CitySelect\";\nimport CategorySelect from \"../CategorySelect\";\nimport styled from \"styled-components\";\n\nconst SelectBox = styled.select`\n  display: inline-block;\n  height: 2rem;\n  width: 10rem;\n  margin-right: 5px;\n`;\n\nfunction BbsList() {\n  const { articleList } = useContext(Appcontext);\n  const [bbsList, setBbsList] = useState([]);\n\n  // 검색용 Hook\n  const [choiceVal, setChoiceVal] = useState(\"\");\n  const [searchVal, setSearchVal] = useState(\"\");\n\n  // Paging\n  const [page, setPage] = useState(1);\n  const [totalCnt, setTotalCnt] = useState(0);\n\n  // Link 용 (함수)\n  let navigate = useNavigate();\n\n  const getBbsList = async (choice, search, page) => {\n    await axios\n      .get(\"http://localhost:3000/bbs\", {\n        params: { choice: choice, search: search, page: page },\n      })\n      .then((resp) => {\n        console.log(\"[BbsList.js] useEffect() success :D\");\n        console.log(resp.data);\n\n        setBbsList(resp.data.bbsList);\n        setTotalCnt(resp.data.pageCnt);\n      })\n      .catch((err) => {\n        console.log(\"[BbsList.js] useEffect() error :<\");\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    getBbsList(\"\", \"\", 1);\n  }, []);\n\n  const changeChoice = (event) => {\n    setChoiceVal(event.target.value);\n  };\n  const changeSearch = (event) => {\n    setSearchVal(event.target.value);\n  };\n  const search = () => {\n    console.log(\n      \"[BbsList.js searchBtn()] choiceVal=\" +\n        choiceVal +\n        \", searchVal=\" +\n        searchVal\n    );\n\n    navigate(\"/bbslist\");\n    getBbsList(choiceVal, searchVal, 1);\n  };\n\n  const changePage = (page) => {\n    setPage(page);\n    getBbsList(choiceVal, searchVal, page);\n  };\n  return (\n    <>\n      <div>\n        {/* 검색 */}\n        <table className=\"search\">\n          <tbody>\n            <tr>\n              \n            <td>\n                {/* <select\n                  className=\"custom-select\"\n                  value={choiceVal}\n                  onChange={changeChoice}\n                >\n                  <option>검색 옵션 선택</option>\n                  <option value=\"title\">제목</option>\n                  <option value=\"title_content\">제목+내용</option>\n                </select> */}\n                <CategorySelect className=\"rounded\" />\n              </td>\n              <td>\n                {/* <select\n                  className=\"custom-select\"\n                  value={choiceVal}\n                  onChange={changeChoice}\n                >\n                  <option>구 선택</option>\n                  <option value=\"title\">제목</option>\n                  <option value=\"title_content\">제목+내용</option>\n                </select> */}\n                <CitySelect className=\"rounded\" />\n              </td>\n\n            </tr>\n            <tr>\n              <td>\n                {/* <select\n                  className=\"custom-select\"\n                  value={choiceVal}\n                  onChange={changeChoice}\n                >\n                  <option>검색 옵션 선택</option>\n                  <option value=\"title\">제목</option>\n                  <option value=\"title_content\">제목+내용</option>\n                </select> */}\n                <SelectBox\n                  value={choiceVal}\n                  onChange={changeChoice}\n                  className=\"rounded\"\n                >\n                  <option>검색 옵션 선택</option>\n                  <option value=\"title\">제목</option>\n                  <option value=\"title_content\">제목+내용</option>\n                </SelectBox>\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"검색어\"\n                  value={searchVal}\n                  onChange={changeSearch}\n                />\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-outline-secondary\"\n                  onClick={search}\n                >\n                  <i className=\"fas fa-search\"></i> 검색\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <br />\n\n        <table className=\"table table-hover\">\n          <thead>\n            <tr>\n              <th className=\"col-md-1\">번호</th>\n              <th className=\"col-md-5\">제목</th>\n              <th className=\"col-md-1\">글쓴이</th>\n              <th className=\"col-md-1\">지역</th>\n              <th className=\"col-md-1\">업무</th>\n              <th className=\"col-md-1\">작성일</th>\n              <th className=\"col-md-1\">조회수</th>\n              <th className=\"col-md-1\">공감</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {bbsList.map(function (bbs, idx) {\n              return <TableRow obj={bbs} key={idx} cnt={idx + 1} />;\n            })}\n          </tbody>\n        </table>\n\n        <Pagination \n          className=\"pagination justify-content-center\"\n          activePage={page}\n          itemsCountPerPage={10}\n          totalItemsCount={totalCnt}\n          pageRangeDisplayed={5}\n          prevPageText={\"‹\"}\n          nextPageText={\"›\"}\n          onChange={changePage}\n        />\n\n        <div className=\"my-5 d-flex justify-content-left\">\n          <Link className=\"btn btn-outline-secondary\" to=\"/bbswrite\">\n            <i className=\"fas fa-pen\"></i> &nbsp; 글쓰기\n          </Link>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction TableRow(props) {\n  const bbs = props.obj;\n\n  return (\n    <tr>\n      <th>{props.cnt}</th>\n      {\n        <>\n          <td>\n            <Arrow depth={bbs.depth}></Arrow> &nbsp; {/* 답글 화살표 */}\n            <Link to={{ pathname: `/bbsdetail/${bbs.seq}` }}>\n              {\" \"}\n              {/* 게시글 상세 링크 */}\n              <span className=\"underline bbs-title\">{bbs.title} </span>{\" \"}\n              {/* 게시글 제목 */}\n            </Link>\n          </td>\n          <td>{bbs.id}</td>\n        </>\n      }\n    </tr>\n  );\n}\n\nconst tap = \"\\u00A0\\u00A0\\u00A0\\u00A0\";\nfunction Arrow(props) {\n  const depth = props.depth;\n\n  if (depth === 0) {\n    return null;\n  }\n\n  const taps = [];\n  for (let i = 0; i < depth; i++) {\n    taps.push(tap);\n  }\n\n  return (\n    <>\n      {taps} <i className=\"fas fa-long-arrow-alt-right\"></i>\n    </>\n  );\n}\n\nexport default BbsList;\n","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsUpdate.js",["125","126","127"],[],"import axios from \"axios\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useContext, useState } from \"react\";\nimport { AuthContext } from \"../context/AuthProvider\";\nimport { HttpHeadersContext } from \"../context/HttpHeadersProvider\";\n\nfunction BbsUpdate() {\n\n\tconst { headers, setHeaders } = useContext(HttpHeadersContext);\n\tconst { auth, setAuth } = useContext(AuthContext);\n\n\tconst navigate = useNavigate();\n\n\tconst location = useLocation();\n\tconst { bbs } = location.state;\n\t\n\tconst [title, setTitle] = useState(bbs.title);\n\tconst [content, setContent] = useState(bbs.content);\n\n\tconst changeTitle = (event) => {\n\t\tsetTitle(event.target.value);\n\t}\n\n\tconst changeContent = (event) => {\n\t\tsetContent(event.target.value);\n\t}\n\n\tconst updateBbs = async () => {\n\n\t\tconst req = {\n\t\t\tid: auth, \n\t\t\ttitle: title, \n\t\t\tcontent: content\n\t\t}\n\n\t\tawait axios.patch(`http://localhost:3000/bbs/${bbs.seq}`, req, {headers: headers})\n\t\t.then((resp) => {\n\t\t\tconsole.log(\"[BbsUpdate.js] updateBbs() success :D\");\n\t\t\tconsole.log(resp.data);\n\n\t\t\tif (resp.data.updatedRecordCount == 1) {\n\t\t\t\talert(\"게시글을 성공적으로 수정했습니다 :D\");\n\t\t\t\tnavigate(`/bbsdetail/${bbs.seq}`); // 글 상세로 이동\n\t\t\t}\n\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(\"[BbsUpdate.js] updateBbs() error :<\");\n\t\t\tconsole.log(err);\n\t\t});\n\n\t}\n\n\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"table\">\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th className=\"table-primary\">작성자</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\"  value={bbs.id} size=\"50px\" readOnly />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th className=\"table-primary\">제목</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={title} onChange={changeTitle} size=\"50px\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th className=\"table-primary\">내용</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<textarea className=\"form-control\" value={content} onChange={changeContent} rows=\"10\" ></textarea>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\n\t\t\t<div className=\"my-3 d-flex justify-content-center\">\n\t\t\t\t<button className=\"btn btn-dark\" onClick={updateBbs}><i className=\"fas fa-pen\"></i> 수정하기</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n}\n\nexport default BbsUpdate;","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsWrite.js",["128","129","130"],[],"import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport { Appcontext } from \"../../App\";\nimport CitySelect from \"../CitySelect\";\nimport CategorySelect from \"../CategorySelect\";\nimport { useNavigate } from \"react-router\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../context/AuthProvider\";\nimport { HttpHeadersContext } from \"../context/HttpHeadersProvider\";\n\nconst Bbsdiv = styled.div`\n  /* text-align: center; */\n  width: 1100px;\n  margin: 0 auto;\n`;\n\nconst TitleInput = styled.input`\n  padding: 0;\n  height: 2rem;\n  width: 1100px;\n  margin: 0 auto;\n`;\n\nexport default function BbsWrite() {\n  const { auth, setAuth } = useContext(AuthContext);\n  const { headers, setHeaders } = useContext(HttpHeadersContext);\n\n  const { cities, category } = useContext(Appcontext);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [todayString, setTodayString] = useState(\"\");\n  const navigate = useNavigate();\n\n  function dateFormat(date) {\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    // let hour = date.getHours();\n    // let minute = date.getMinutes();\n    // let second = date.getSeconds();\n\n    month = month >= 10 ? month : \"0\" + month;\n    day = day >= 10 ? day : \"0\" + day;\n    // hour = hour >= 10 ? hour : '0' + hour;\n    // minute = minute >= 10 ? minute : '0' + minute;\n    // second = second >= 10 ? second : '0' + second;\n\n    // return date.getFullYear() + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;\n    return date.getFullYear() + \"-\" + month + \"-\" + day;\n  }\n\n  const checkContentsFilled = () => {\n    if (cities[\"main_city\"] === \"\") alert(\"구를 선택해주세요.\");\n    else if (cities[\"main_city\"] !== \"entire\" && cities[\"sub_city\"] === \"\")\n      alert(\"읍/면/동을 선택해주세요.\");\n    else if (category === \"\") alert(\"업무 카테고리를 선택해주세요.\");\n    else if (title === \"\") alert(\"제목을 입력해주세요.\");\n    else if (content === \"\") alert(\"내용을 입력해주세요.\");\n    else return true;\n\n    return false;\n  };\n\n  const handleSubmit = async () => {\n    if (checkContentsFilled()) createBbs();\n  };\n\n  const createBbs = async () => {\n    const today = new Date();\n    setTodayString(dateFormat(today));\n    const req = {\n      id: localStorage.getItem(\"id\"),\n      title: title,\n      content: stringToHTML(content).querySelector(\"p\").innerText,\n      date: todayString,\n      cities: cities,\n      category: category,\n    };\n\n    await axios\n      .post(\"http://localhost:3000/bbs\", req, { headers: headers })\n      .then((resp) => {\n        console.log(\"[BbsWrite.js] createBbs() success :D\");\n        console.log(resp.data);\n\n        alert(\"새로운 게시글을 성공적으로 등록했습니다 :D\");\n        navigate(`/bbsdetail/${resp.data.seq}`); // 새롭게 등록한 글 상세로 이동\n      })\n      .catch((err) => {\n        console.log(\"[BbsWrite.js] createBbs() error :<\");\n        console.log(err);\n      });\n  };\n\n  const stringToHTML = function (str) {\n    var parser = new DOMParser();\n    var doc = parser.parseFromString(str, \"text/html\");\n    return doc.body;\n  };\n\n  return (\n    <>\n      <Bbsdiv>\n        <div className=\"selectbox\">\n          <CitySelect />\n          <CategorySelect />\n        </div>\n\n        <TitleInput\n          name=\"title\"\n          placeholder=\" 제목을 입력하세요.\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"my-2 rounded\"\n        />\n        <CKEditor\n          editor={ClassicEditor}\n          config={{\n            placeholder:\n              \"내용을 입력하세요. 여러분의 소중한 의견을 귀 기울여 듣겠습니다.\",\n          }}\n          name=\"content\"\n          data={content}\n          onChange={(event, editor) => {\n            const string = editor.getData();\n            setContent(string);\n            console.log(string);\n          }}\n        />\n        <button className=\"btn btn-outline-secondary\" onClick={handleSubmit}>\n          <i className=\"fas fa-pen\"></i> 등록하기\n        </button>\n      </Bbsdiv>\n    </>\n  );\n}\n","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\bbs\\BbsDetail.js",["131","132","133"],[],"import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport CommentWrite from \"../comment/CommentWrite\";\nimport CommentList from \"../comment/CommentList\";\nimport { AuthContext } from \"../context/AuthProvider\";\n\nfunction BbsDetail() {\n  const { auth, setAuth } = useContext(AuthContext);\n\n  const [bbs, setBbs] = useState({});\n  const { seq } = useParams(); // 파라미터 가져오기\n\n  const navigate = useNavigate();\n\n  const getBbsDetail = async () => {\n    await axios\n      .get(`http://localhost:3000/bbs/${seq}`, {\n        params: { readerId: auth ? auth : \"\" },\n      })\n      .then((resp) => {\n        console.log(\"[BbsDetail.js] getBbsDetail() success :D\");\n        console.log(resp.data);\n\n        setBbs(resp.data.bbs);\n      })\n      .catch((err) => {\n        console.log(\"[BbsDetail.js] getBbsDetail() error :<\");\n        console.log(err);\n      });\n  };\n\n  const deleteBbs = async () => {\n    await axios\n      .delete(`http://localhost:3000/bbs/${seq}`)\n      .then((resp) => {\n        console.log(\"[BbsDetail.js] deleteBbs() success :D\");\n        console.log(resp.data);\n\n        if (resp.data.deletedRecordCount === 1) {\n          alert(\"게시글을 성공적으로 삭제했습니다 :D\");\n          navigate(\"/bbslist\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"[BbsDetail.js] deleteBbs() error :<\");\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    getBbsDetail();\n  }, []);\n\n  const updateBbs = {\n    seq: bbs.seq,\n    id: bbs.id,\n    title: bbs.title,\n    content: bbs.content,\n  };\n\n  const parentBbs = {\n    id: bbs.id,\n    title: bbs.title,\n  };\n\n  return (\n    <div>\n      <div className=\"my-3 d-flex justify-content-end\">\n        <Link\n          className=\"btn btn-outline-secondary\"\n          to={{ pathname: `/bbsanswer/${bbs.seq}` }}\n          state={{ parentBbs: parentBbs }}\n        >\n          <i className=\"fas fa-pen\"></i> 답글쓰기\n        </Link>{\" \"}\n        &nbsp;\n        {\n          /* 자신이 작성한 게시글인 경우에만 수정 삭제 가능 */\n          localStorage.getItem(\"id\") == bbs.id ? (\n            <>\n              <Link\n                className=\"btn btn-outline-secondary\"\n                to=\"/bbsupdate\"\n                state={{ bbs: updateBbs }}\n              >\n                <i className=\"fas fa-edit\"></i> 수정\n              </Link>{\" \"}\n              &nbsp;\n              <button className=\"btn btn-outline-danger\" onClick={deleteBbs}>\n                <i className=\"fas fa-trash-alt\"></i> 삭제\n              </button>\n            </>\n          ) : null\n        }\n      </div>\n\n      <table className=\"table table-striped\">\n        <tbody>\n          <tr>\n            <th className=\"col-3\">작성자</th>\n            <td>\n              <span>{bbs.id}</span>\n            </td>\n          </tr>\n\n          <tr>\n            <th>제목</th>\n            <td>\n              <span>{bbs.title}</span>\n            </td>\n          </tr>\n\n          <tr>\n            <th>작성일</th>\n            <td>\n              <span>{bbs.createdAt}</span>\n            </td>\n          </tr>\n\n          <tr>\n            <th>조회수</th>\n            <td>\n              <span>{bbs.readCount}</span>\n            </td>\n          </tr>\n\n          <tr>\n            <th>내용</th>\n            <td>\n              <div>{bbs.content}</div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div className=\"my-3 d-flex justify-content-center\">\n        <Link className=\"btn btn-outline-secondary\" to=\"/bbslist\">\n          <i className=\"fas fa-list\"></i> 글목록\n        </Link>\n      </div>\n      <br />\n      <br />\n\n      {/* 댓글 작성 컴포넌트 */}\n      {auth ? ( // 로그인한 사용자만 댓글 작성 가능\n        <CommentWrite seq={seq} />\n      ) : null}\n\n      {/* 댓글 리스트 컴포넌트 */}\n      <CommentList seq={seq} />\n    </div>\n  );\n}\n\nexport default BbsDetail;\n","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\member\\Join.js",["134","135","136","137"],[],"import axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nfunction Join() {\n  const [id, setId] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [pwd, setPwd] = useState(\"\");\n  const [checkPwd, setCheckPwd] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [IP, setIP] = useState(\"\");\n  const [addr, setAddr] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const changeId = (event) => {\n    setId(event.target.value);\n  };\n\n  const changeName = (event) => {\n    setName(event.target.value);\n  };\n\n  const changePwd = (event) => {\n    setPwd(event.target.value);\n  };\n\n  const changeCheckPwd = (event) => {\n    setCheckPwd(event.target.value);\n  };\n\n  const changeEmail = (event) => {\n    setEmail(event.target.value);\n  };\n\n  /* 아이디 중복 체크 */\n  const checkIdDuplicate = async () => {\n    await axios\n      .get(\"http://localhost:3000/user\", { params: { id: id } })\n      .then((resp) => {\n        console.log(\"[Join.js] checkIdDuplicate() success :D\");\n        console.log(resp.data);\n\n        if (resp.status == 200) {\n          alert(\"사용 가능한 아이디입니다.\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"[Join.js] checkIdDuplicate() error :<\");\n        console.log(err);\n\n        const resp = err.response;\n        if (resp.status == 400) {\n          alert(resp.data);\n        }\n      });\n  };\n\n  const getLocation = async () => {\n    setIsLoading(true);\n    const response = await fetch(\"https://api.ipify.org?format=json\");\n    const data = await response.json();\n    await setIP(data.ip);\n\n    const url = await `http://ip-api.com/json/${IP}`;\n    const locationResponse = await fetch(`http://ip-api.com/json/${IP}`);\n    const loc = await locationResponse.json();\n\n    const lat = await loc.lat;\n    const lon = await loc.lon;\n\n    const reverseGeo = await fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=AIzaSyBLa5MgCfBuccSAx8A-P-7StdANmKKHJic`\n    );\n    const geoResponse = await reverseGeo.json();\n\n    const address = geoResponse.results[0].address_components;\n\n    console.log(lat, lon);\n\n    console.log(\n      address[4].long_name,\n      address[3].long_name,\n      address[2].long_name\n    );\n    setAddr([address[3].long_name, address[2].long_name]);\n    setIsLoading(false);\n  };\n\n  /* 회원가입 */\n  const join = async () => {\n    const req = {\n      id: id,\n      name: name,\n      pwd: pwd,\n      checkPwd: checkPwd,\n      email: email,\n      addr: addr,\n    };\n\n    await axios\n      .post(\"http://localhost:3000/user/join\", req)\n      .then((resp) => {\n        console.log(\"[Join.js] join() success :D\");\n        console.log(resp.data);\n\n        alert(resp.data.id + \"님 회원가입을 축하드립니다 🎊\");\n        navigate(\"/login\");\n      })\n      .catch((err) => {\n        console.log(\"[Join.js] join() error :<\");\n        console.log(err);\n\n        // alert(err.response.data);\n\n        const resp = err.response;\n        if (resp.status == 400) {\n          alert(resp.data);\n        }\n      });\n  };\n\n  return (\n    <div>\n      <table className=\"table jointable w-60\">\n        <tbody>\n          <tr>\n            <th className=\"align-middle\">아이디</th>\n            <td>\n              <input\n                type=\"text\"\n                value={id}\n                onChange={changeId}\n                size=\"50px\"\n                className=\"input-lg\"\n              />\n              &nbsp; &nbsp;\n              <button\n                className=\"btn btn-outline-danger\"\n                onClick={checkIdDuplicate}\n              >\n                <i className=\"fas fa-check\"></i> 아이디 중복 확인\n              </button>\n            </td>\n          </tr>\n\n          <tr>\n            <th className=\"align-middle\">이름</th>\n            <td>\n              <input\n                type=\"text\"\n                value={name}\n                onChange={changeName}\n                size=\"100px\"\n                className=\"input-lg\"\n              />\n            </td>\n          </tr>\n\n          <tr>\n            <th className=\"align-middle\">비밀번호</th>\n            <td>\n              <input\n                type=\"password\"\n                value={pwd}\n                onChange={changePwd}\n                size=\"100px\"\n                className=\"input-lg\"\n              />\n            </td>\n          </tr>\n\n          <tr>\n            <th className=\"align-middle\">비밀번호 확인</th>\n            <td>\n              <input\n                type=\"password\"\n                value={checkPwd}\n                onChange={changeCheckPwd}\n                size=\"100px\"\n                className=\"input-lg\"\n              />\n            </td>\n          </tr>\n\n          <tr>\n            <th className=\"align-middle\">이메일</th>\n            <td>\n              <input\n                type=\"text\"\n                value={email}\n                onChange={changeEmail}\n                size=\"100px\"\n              />\n            </td>\n          </tr>\n          <tr>\n            <th className=\"col-2 align-middle\">위치 인증</th>\n            <td>\n              <button className=\"btn btn-outline-primary\" onClick={getLocation}>\n                위치 인증하기\n              </button>\n              &nbsp; &nbsp;\n              {!isLoading && addr ? (\n                <span className=\"badge badge-success\">\n                  <i className=\"fas fa-check\" />\n                  &nbsp;\n                  <span>\n                    {addr[0]} {addr[1]}\n                  </span>\n                </span>\n              ) : null}\n              {isLoading ? (\n                <span className=\"h6\">위치 정보 가져오는 중...</span>\n              ) : null}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <br />\n\n      <div className=\"my-3 d-flex justify-content-center\">\n        <button className=\"btn btn-outline-secondary\" onClick={join}>\n          <i className=\"fas fa-user-plus\"></i> 회원가입\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Join;\n","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\member\\Login.js",["138","139"],[],"/* 로그인 컴포넌트 */\n\nimport axios from \"axios\";\nimport { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { AuthContext } from \"../context/AuthProvider\";\nimport { HttpHeadersContext } from \"../context/HttpHeadersProvider\";\n\nfunction Login() {\n\n\tconst { auth, setAuth } = useContext(AuthContext);\n\tconst { headers, setHeaders } = useContext(HttpHeadersContext);\n\n\tconst navigate = useNavigate();\n\n\tconst [id, setId] = useState(\"\");\n\tconst [pwd, setPwd] = useState(\"\");\n\n\tconst changeId = (event) => {\n\t\tsetId(event.target.value);\n\t}\n\n\tconst changePwd = (event) => {\n\t\tsetPwd(event.target.value);\n\t}\n\n\tconst login = async () => {\n\n\t\tconst req = {\n\t\t\tid: id,\n\t\t\tpwd: pwd\n\t\t}\n\n\t\tawait axios.post(\"http://localhost:3000/user/login\", req)\n\t\t.then((resp) => {\n\t\t\tconsole.log(\"[Login.js] login() success :D\");\n\t\t\tconsole.log(resp.data);\n\n\t\t\t\talert(resp.data.id + \"님, 성공적으로 로그인 되었습니다 🔐\");\n\n\t\t\t\t// JWT 토큰 저장\n\t\t\t\tlocalStorage.setItem(\"bbs_access_token\", resp.data.jwt);\n\t\t\t\tlocalStorage.setItem(\"id\", resp.data.id);\n\n\t\t\t\tsetAuth(resp.data.id); // 사용자 인증 정보(아이디 저장)\n\t\t\t\tsetHeaders({\"Authorization\": `Bearer ${resp.data.jwt}`}); // 헤더 Authorization 필드 저장\n\n\t\t\t\tnavigate(\"/bbslist\");\n\t\t\t\n\n\t\t}).catch((err) => {\n\t\t\tconsole.log(\"[Login.js] login() error :<\");\n\t\t\tconsole.log(err);\n\n\t\t\talert(\"⚠️ \" + err.response.data);\n\t\t});\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"logintable w-30\">\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th className=\"col-3\">아이디</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" value={id} onChange={changeId} size=\"50px\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>비밀번호</th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"password\" value={pwd} onChange={changePwd} size=\"50px\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table><br />\n\n\t\t\t<div className=\"my-1 d-flex justify-content-center\">\n\t\t\t\t<button className=\"btn btn-outline-secondary\" onClick={login}><i className=\"fas fa-sign-in-alt\"></i> 로그인</button>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n\nexport default Login;\n","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\member\\Logout.js",["140"],[],"import { useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { AuthContext } from \"../context/AuthProvider\";\n\nfunction Logout() {\n\n\tconst { auth, setAuth } = useContext(AuthContext);\n\n\tconst navigate = useNavigate();\n\t\n\tconst logout = () => {\n\t\t\n\t\tlocalStorage.removeItem(\"bbs_access_token\");\n\t\tlocalStorage.removeItem(\"id\");\n\n\t\talert(auth + \"님, 성공적으로 로그아웃 됐습니다 🔒\");\n\t\tsetAuth(null);\n\t\t\n\t\tnavigate(\"/\");\n\t};\n\n\tuseEffect(() => {\n\t\tlogout();\n\t}, []);\n\n}\n\nexport default Logout;","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\CitySelect.js",[],[],"C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\CategorySelect.js",["141"],[],"import React, { useContext } from 'react'\nimport styled from 'styled-components';\nimport { Appcontext } from '../App';\n\nconst SelectBox = styled.select`\n  display:inline-block;\n  height: 2rem;\n  width: 10rem;\n`;\nconst CategorySelect = () => {\n    const {category, setCategories} = useContext(Appcontext);\n    const changeCategory = (e) => {\n        setCategories(e.target.value);\n        console.log(e.target.value);\n    }\n  return (\n    <>\n        <SelectBox onChange={changeCategory} className=\"rounded\">\n            <option value=\"\">업무 선택</option>\n            <option value=\"transport\">교통</option>\n            <option value=\"nature\">환경</option>\n            <option value=\"education\">교육</option>\n            <option value=\"welfare\">복지</option>\n            <option value=\"recruit\">고용</option>\n            <option value=\"house\">주거</option>\n            <option value=\"etc\">기타</option>\n        </SelectBox>\n    </>\n  )\n}\n\nexport default CategorySelect;","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\comment\\CommentWrite.js",["142"],[],"import axios from \"axios\";\nimport { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { HttpHeadersContext } from \"../context/HttpHeadersProvider\";\n\nfunction CommentWrite(props) {\n\n\tconst { headers, setHeaders } = useContext(HttpHeadersContext);\n\n\tconst id = localStorage.getItem(\"id\");\n\tconst seq = props.seq;\n\n\tconst navigate = useNavigate();\n\n\tconst [content, setContent] = useState(\"\");\n\n\tconst chageContent = (event) => {\n\t\tsetContent(event.target.value);\n\t}\n\n\tconst createComment = async() => {\n\n\t\tconst req = {\n\t\t\tid: id,\n\t\t\tcontent: content,\n\t\t\tbbsSeq: seq\n\t\t}\n\n\t\tawait axios.post(`http://localhost:3000/comment`, req, { params: {\"bbsSeq\": seq}, headers: headers})\n\t\t.then((resp) => {\n\t\t\tconsole.log(\"[CommentWrite.js] createComment() success :D\");\n\t\t\tconsole.log(resp.data);\n\n\t\t\tif (resp.data.seq != null) {\n\t\t\t\talert(\"댓글을 성공적으로 등록했습니다 :D\");\n\t\t\t\tnavigate(0);\n\t\t\t}\n\n\t\t}).catch((err) => {\n\t\t\tconsole.log(\"[CommentWrite.js] createComment() error :<\");\n\t\t\tconsole.log(err);\n\n\t\t});\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t\t{/* 상단 영역 (프로필 이미지, 댓글 작성자) */}\n\t\t\t\t<div className=\"my-1 d-flex justify-content-center\">\n\t\t\t\t\t<div className=\"col-1\">\n\t\t\t\t\t\t<img src=\"/images/profile-placeholder.png\" alt=\"프로필 이미지\"\n\t\t\t\t\t\t\tclassName=\"profile-img\"/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"col-7\">\n\t\t\t\t\t\t<span className=\"comment-id\" >{id}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-2 my-1 d-flex justify-content-end\">\n\t\t\t\t\t\t<button className=\"btn btn-outline-secondary\" onClick={createComment}><i className=\"fas fa-comment-dots\"></i> 댓글 추가</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* 하단 영역 (댓글 내용) */}\n\t\t\t\t<div className=\"my-3 d-flex justify-content-center\">\n\t\t\t\t\t<textarea className=\"col-10\" rows=\"5\" value={content} onChange={chageContent}></textarea>\n\t\t\t\t</div><br/><br/>\n\t\t</>\n\t)\n}\n\nexport default CommentWrite;","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\comment\\CommentList.js",["143"],[],"import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport Pagination from \"react-js-pagination\";\n\nimport Comment from \"./Comment.js\"\n\nfunction CommentList(props) {\n\n\tconst seq = props.seq;\n\n\t// Paging\n\tconst [page, setPage] = useState(1);\n\tconst [totalCnt, setTotalCnt] = useState(0);\n\n\tconst [commentList, setCommentList] = useState([]);\n\n\tconst changePage = (page) => {\n\t\tsetPage(page);\n\t\tgetCommentList(page);\n\t}\n\n\tconst getCommentList = async (page) => {\n\t\tawait axios.get(`http://localhost:3000/comment`, { params: { \"bbsSeq\": seq, \"page\": page } })\n\t\t\t.then((resp) => {\n\t\t\t\tconsole.log(\"[BbsComment.js] getCommentList() success :D\");\n\t\t\t\tconsole.log(resp.data);\n\n\t\t\t\tsetCommentList(resp.data.commentList);\n\t\t\t\tsetTotalCnt(resp.data.pageCnt);\n\n\t\t\t}).catch((err) => {\n\t\t\t\tconsole.log(\"[BbsComment.js] getCommentList() error :<\");\n\t\t\t\tconsole.log(err);\n\n\t\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\tgetCommentList(1);\n\t}, []);\n\n\treturn (\n\t\t<>\n\n\t\t\t<div className=\"my-1 d-flex justify-content-center\">\n\t\t\t\t<h5><i className=\"fas fa-paperclip\"></i> 댓글 목록 </h5>\n\t\t\t</div>\n\n\t\t\t<Pagination\n\t\t\t\tactivePage={page}\n\t\t\t\titemsCountPerPage={5}\n\t\t\t\ttotalItemsCount={totalCnt}\n\t\t\t\tpageRangeDisplayed={5}\n\t\t\t\tprevPageText={\"‹\"}\n\t\t\t\tnextPageText={\"›\"}\n\t\t\t\tonChange={changePage} />\n\t\t\t{\n\t\t\t\tcommentList.map(function (comment, idx) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"my-5\" key={idx}>\n\t\t\t\t\t\t\t<Comment obj={comment} key={idx} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\n\t\t</>\n\n\t);\n}\n\n\nexport default CommentList;","C:\\Users\\박지윤\\cse-hackathon-2022\\frontend\\src\\components\\comment\\Comment.js",["144","145","146","147","148","149"],[],"import axios from \"axios\";\nimport { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\"\nimport { AuthContext } from \"../context/AuthProvider\";\nimport { HttpHeadersContext } from \"../context/HttpHeadersProvider\";\n\n\n/* 댓글 컴포넌트 */\nfunction Comment(props) {\n\tconst {auth, setAuth} = useContext(AuthContext);\n\tconst {headers, setHeaders} = useContext(HttpHeadersContext);\n\tconst comment = props.obj;\n\n\tconst navigate = useNavigate();\n\n\tconst [show, setShow] = useState(false);\n\n\tconst [content, setContent] = useState(comment.content);\n\tconst changeContent = (event) => {\n\t\tsetContent(event.target.value);\n\t};\n\n\t/* 댓글 수정 */\n\tconst updateComment = async () => {\n\n\t\tconst req = {\n\t\t\tcontent: content\n\t\t};\n\n\t\tawait axios.patch(`http://localhost:3000/comment/${comment.seq}`, req, {headers: headers})\n\t\t.then((resp) => {\n\t\t\t\n\t\t\tconsole.log(\"[Comment.js] updateComment() success :D\");\n\t\t\tconsole.log(resp.data);\n\n\t\t\talert(\"댓글을 성공적으로 수정했습니다 !\");\n\t\t\tnavigate(0);\n\n\t\t}).catch((err) => {\n\n\t\t\tconsole.log(\"[Comment.js] updateComment() error :<\");\n\t\t\tconsole.log(err);\n\n\t\t\talert(err.response.data);\n\n\t\t});\n\n\n\t\tupdateToggle();\n\t}\n\n\t/* 댓글 삭제 */\n\tconst deleteComment = async () => {\n\t\tawait axios.delete(`http://localhost:3000/comment/${comment.seq}`)\n\t\t\t.then((resp) => {\n\t\t\t\tconsole.log(\"[BbsComment.js] deleteComment() success :D\");\n\t\t\t\tconsole.log(resp.data);\n\n\t\t\t\tif (resp.data.deletedRecordCount == 1) {\n\t\t\t\t\talert(\"답글을 성공적으로 삭제했습니다 :D\");\n\t\t\t\t\tnavigate(0);\n\t\t\t\t}\n\t\t\t}).catch((err) => {\n\t\t\t\tconsole.log(\"[BbsComment.js] deleteComment() error :<\");\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\n\tfunction updateToggle() { \n\t\tsetShow(show => !show) \n\t}\n\n\t// 삭제되지 않은 댓글의 경우\n\tif (comment.del == 0) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{/* 상단 영역 (프로필 이미지, 댓글 작성자, 댓글 작성시간) */}\n\t\t\t\t<div className=\"my-1 d-flex justify-content-center\">\n\t\t\t\t\t<div className=\"col-1\">\n\t\t\t\t\t\t<img src=\"/images/profile-placeholder.png\" alt=\"프로필 이미지\"\n\t\t\t\t\t\t\tclassName=\"profile-img\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-5\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<span className=\"comment-id\">{comment.id}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<span>{comment.createdAt}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"col-4 d-flex justify-content-end\">\n\t\t\t\t\t{\n\t\t\t\t\t\t/* 자신이 작성한 댓글인 경우에만 수정 삭제 가능 */\n\t\t\t\t\t\t(localStorage.getItem(\"id\") == comment.id) ?\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<button className=\"btn btn-outline-secondary\" onClick={updateToggle}><i className=\"fas fa-edit\"></i> 수정</button> &nbsp; \n\t\t\t\t\t\t\t\t<button className=\"btn btn-outline-danger\" onClick={deleteComment}><i className=\"fas fa-trash-alt\"></i> 삭제</button>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{\n\t\t\t\t\t/* 댓글 수정하는 경우 */\n\t\t\t\t\tshow ?\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{/* 하단 영역 (댓글 내용 + 댓글 내용 편집 창) */}\n\t\t\t\t\t\t\t<div className=\"my-3 d-flex justify-content-center\">\n\t\t\t\t\t\t\t\t<textarea className=\"col-10\" rows=\"5\" value={content} onChange={changeContent}></textarea>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"my-1 d-flex justify-content-center\">\n\t\t\t\t\t\t\t\t<button className=\"btn btn-dark\" onClick={updateComment}><i className=\"fas fa-edit\"></i>  수정 완료</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t:\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{/* 하단 영역 (댓글 내용) */}\n\t\t\t\t\t\t\t<div className=\"my-3 d-flex justify-content-center\">\n\t\t\t\t\t\t\t\t<div className=\"col-10 comment\">{content}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t}\n\n\n\t\t\t</>\n\t\t);\n\t}\n\n\t// 삭제된 댓글의 경우\n\telse {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"my-5 d-flex justify-content-center\">\n\t\t\t\t\t<div className=\"comment\">\n\t\t\t\t\t\t<span className=\"del-span\">⚠️ 작성자에 의해 삭제된 댓글입니다.</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default Comment;",{"ruleId":"150","severity":1,"message":"151","line":16,"column":10,"nodeType":"152","messageId":"153","endLine":16,"endColumn":14},{"ruleId":"150","severity":1,"message":"154","line":16,"column":16,"nodeType":"152","messageId":"153","endLine":16,"endColumn":23},{"ruleId":"150","severity":1,"message":"155","line":1,"column":22,"nodeType":"152","messageId":"153","endLine":1,"endColumn":30},{"ruleId":"150","severity":1,"message":"156","line":6,"column":17,"nodeType":"152","messageId":"153","endLine":6,"endColumn":24},{"ruleId":"150","severity":1,"message":"157","line":18,"column":11,"nodeType":"152","messageId":"153","endLine":18,"endColumn":22},{"ruleId":"150","severity":1,"message":"158","line":9,"column":19,"nodeType":"152","messageId":"153","endLine":9,"endColumn":29},{"ruleId":"150","severity":1,"message":"156","line":10,"column":16,"nodeType":"152","messageId":"153","endLine":10,"endColumn":23},{"ruleId":"159","severity":1,"message":"160","line":41,"column":37,"nodeType":"161","messageId":"162","endLine":41,"endColumn":39},{"ruleId":"150","severity":1,"message":"163","line":27,"column":11,"nodeType":"152","messageId":"153","endLine":27,"endColumn":15},{"ruleId":"150","severity":1,"message":"156","line":27,"column":17,"nodeType":"152","messageId":"153","endLine":27,"endColumn":24},{"ruleId":"150","severity":1,"message":"158","line":28,"column":20,"nodeType":"152","messageId":"153","endLine":28,"endColumn":30},{"ruleId":"150","severity":1,"message":"156","line":10,"column":17,"nodeType":"152","messageId":"153","endLine":10,"endColumn":24},{"ruleId":"164","severity":1,"message":"165","line":54,"column":6,"nodeType":"166","endLine":54,"endColumn":8,"suggestions":"167"},{"ruleId":"159","severity":1,"message":"160","line":81,"column":38,"nodeType":"161","messageId":"162","endLine":81,"endColumn":40},{"ruleId":"159","severity":1,"message":"160","line":44,"column":25,"nodeType":"161","messageId":"162","endLine":44,"endColumn":27},{"ruleId":"159","severity":1,"message":"160","line":53,"column":25,"nodeType":"161","messageId":"162","endLine":53,"endColumn":27},{"ruleId":"150","severity":1,"message":"168","line":65,"column":11,"nodeType":"152","messageId":"153","endLine":65,"endColumn":14},{"ruleId":"159","severity":1,"message":"160","line":117,"column":25,"nodeType":"161","messageId":"162","endLine":117,"endColumn":27},{"ruleId":"150","severity":1,"message":"163","line":11,"column":10,"nodeType":"152","messageId":"153","endLine":11,"endColumn":14},{"ruleId":"150","severity":1,"message":"169","line":12,"column":10,"nodeType":"152","messageId":"153","endLine":12,"endColumn":17},{"ruleId":"164","severity":1,"message":"170","line":24,"column":5,"nodeType":"166","endLine":24,"endColumn":7,"suggestions":"171"},{"ruleId":"150","severity":1,"message":"172","line":11,"column":12,"nodeType":"152","messageId":"153","endLine":11,"endColumn":20},{"ruleId":"150","severity":1,"message":"158","line":9,"column":19,"nodeType":"152","messageId":"153","endLine":9,"endColumn":29},{"ruleId":"164","severity":1,"message":"173","line":40,"column":5,"nodeType":"166","endLine":40,"endColumn":7,"suggestions":"174"},{"ruleId":"150","severity":1,"message":"163","line":10,"column":9,"nodeType":"152","messageId":"153","endLine":10,"endColumn":13},{"ruleId":"150","severity":1,"message":"156","line":10,"column":15,"nodeType":"152","messageId":"153","endLine":10,"endColumn":22},{"ruleId":"150","severity":1,"message":"158","line":11,"column":18,"nodeType":"152","messageId":"153","endLine":11,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":59,"column":38,"nodeType":"161","messageId":"162","endLine":59,"endColumn":40},{"ruleId":"159","severity":1,"message":"160","line":74,"column":18,"nodeType":"161","messageId":"162","endLine":74,"endColumn":20},{"ruleId":"159","severity":1,"message":"160","line":95,"column":35,"nodeType":"161","messageId":"162","endLine":95,"endColumn":37},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'setUser' is assigned a value but never used.","'useState' is defined but never used.","'setAuth' is assigned a value but never used.","'articleList' is assigned a value but never used.","'setHeaders' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'auth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBbsDetail'. Either include it or remove the dependency array.","ArrayExpression",["175"],"'url' is assigned a value but never used.","'headers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'logout'. Either include it or remove the dependency array.",["176"],"'category' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCommentList'. Either include it or remove the dependency array.",["177"],{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [getBbsDetail]",{"range":"184","text":"185"},"Update the dependencies array to be: [logout]",{"range":"186","text":"187"},"Update the dependencies array to be: [getCommentList]",{"range":"188","text":"189"},[1526,1528],"[getBbsDetail]",[482,484],"[logout]",[933,935],"[getCommentList]"]